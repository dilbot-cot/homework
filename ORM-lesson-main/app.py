from flask import Flask, jsonify, request, abort
from marshmallow.validate import Length
from datetime import timedelta, date

app = Flask(__name__)

from flask_marshmallow import Marshmallow
ma = Marshmallow(app)

from flask_sqlalchemy import SQLAlchemy 
# set the database URI via SQLAlchemy, 
app.config["SQLALCHEMY_DATABASE_URI"] = "postgresql+psycopg2://db_dev:123456@localhost:5432/trello_clone_db"
# to avoid the deprecation warning
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

from flask_bcrypt import Bcrypt
bcrypt = Bcrypt(app)

app.config["JWT_SECRET_KEY"] = "Backend best end"
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
jwt = JWTManager(app)



#create the database object
db = SQLAlchemy(app)

# create app's cli command named create, then run it in the terminal as "flask create", 
# it will invoke create_db function
@app.cli.command("create")
def create_db():
    db.create_all()
    print("Tables created")

@app.cli.command("seed")
def seed_db():
    from datetime import date
    # create the card object
    card1 = Card(
        # set the attributes, not the id, SQLAlchemy will manage that for us
        title = "Start the project",
        description = "Stage 1, creating the database",
        status = "To Do",
        priority = "High",
        date = date.today()
    )
    # Add the object as a new row to the table
    db.session.add(card1)

    card2 = Card(
        # set the attributes, not the id, SQLAlchemy will manage that for us
        title = "SQLAlchemy and Marshmallow",
        description = "Stage 2, integrate both modules in the project",
        status = "Ongoing",
        priority = "High",
        date = date.today()
    )
    # Add the object as a new row to the table
    db.session.add(card2)
    
    admin_user = User(
        email = "admin",
        password = bcrypt.generate_password_hash("password123").decode("utf-8"),
        admin = True
    )
    db.session.add(admin_user)

    user1 = User(
        email = "user1",
        password = bcrypt.generate_password_hash("123456").decode("utf-8")
    )
    db.session.add(user1)

    # commit the changes
    db.session.commit()
    print("Table seeded") 

@app.cli.command("drop")
def drop_db():
    db.drop_all()
    print("Tables dropped") 

class Card(db.Model):
    # define the table name for the db
    __tablename__= "cards"
    # Set the primary key, we need to define that each attribute is also a column in the db table, remember "db" is the object we created in the previous step.
    id = db.Column(db.Integer,primary_key=True)
    # Add the rest of the attributes. 
    title = db.Column(db.String())
    description = db.Column(db.String())
    date = db.Column(db.Date())
    status = db.Column(db.String())
    priority = db.Column(db.String())

class User(db.Model):
    __tablename__= "users"

    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(), nullable=False, unique=True)
    password = db.Column(db.String(), nullable=False)
    admin = db.Column(db.Boolean(), default=False)
    

#create the Card Schema with Marshmallow, it will provide the serialization needed for converting the data into JSON
class CardSchema(ma.Schema):
    class Meta:
        # Fields to expose
        fields = ("id", "title", "description", "date", "status", "priority")

class UserSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = User
    password = ma.String(validate=Length(min=6))

#single card schema, when one card needs to be retrieved
card_schema = CardSchema()
#multiple card schema, when many cards need to be retrieved
cards_schema = CardSchema(many=True)
user_schema = UserSchema()
users_schema = UserSchema(many=True)

@app.route("/")
def hello():
  return "Hello World!"

@app.route("/cards", methods=["GET"])
def get_cards():
    #get all the cards from the database table
    stmt = db.select(Card)
    cards = db.session.scalars(stmt)
    # Convert the cards from the database into a JSON format and store them in result
    result = cards_schema.dump(cards)
    #return result in JSON format
    return jsonify(result)

@app.route("/cards", methods=["POST"])
#decorator ensures jwt is included in the request
@jwt_required()
def card_create():
    #Create a new card
    card_fields = card_schema.load(request.json)

    new_card = Card()
    new_card.title = card_fields["title"]
    new_card.description = card_fields["description"]
    new_card.status = card_fields["status"]
    new_card.priority = card_fields["priority"]
    #Not taken from the request, generated by the server
    new_card.date = date.today()
    #Add to the database
    db.session.add(new_card)
    db.session.commit()
    return jsonify(card_schema.dump(new_card))

@app.route("/auth/register", methods=["POST"])
def auth_register():
    #The request data will be loaded in a user_schema converted to JSON. Request needs to be imported from 
    user_fields = user_schema.load(request.json)
    #find the user by email
    stmt = db.select(User).filter_by(email=request.json['email'])
    user = db.session.scalar(stmt)

    if user:
        #return abort message
        return abort(400, description="Email already registered")

    #Create the user object
    user = User()
    #Add the email attribute
    user.email = user_fields["email"]
    #Add the password attribute hashed by bycrypt
    user.password = bcrypt.generate_password_hash(user_fields["password"]).decode("utf-8")
    #set admin to false
    user.admin = False
    #Add it to the database and commit
    db.session.add(user)
    db.session.commit()

    #create a variable to set an expiry
    expiry = timedelta(days=1)
    #create access token
    access_token = create_access_token(identity=str(user.id), expires_delta=expiry)
    return jsonify({"user":user.email, "token": access_token})
    

@app.route("/auth/login", methods=["POST"])
def auth_login():
    user_fields = user_schema.load(request.json)

    stmt = db.select(User).filter_by(email=request.json['email'])
    user = db.session.scalar(stmt)

    if not user or not bcrypt.check_password_hash(user.password, user_fields['password']):
        return abort(401, description="Incorrect username and password")
    
    expiry = timedelta(days=1)
    #create access token
    access_token = create_access_token(identity=str(user.id), expires_delta=expiry)
    #return user email and access token    
    return jsonify({"user":user.email, "token": access_token})

@app.route("/cards/<int:id>", methods=["DELETE"])
@jwt_required()
def card_delete(id):
    user_id = get_jwt_identity()

    stmt = db.select(User).filter_by(id=user_id)
    user = db.session.scalar(stmt)

    if not user:
        return abort(401, description="Invalid user")
    
    if not user.admin:
        return abort(401, description="Unauthorised user")
    
    stmt = db.select(Card).filter_by(id=id)
    card = db.session.scalar(stmt)

    if not card:
        return abort(400, description = "Card does not exist")
    
    db.session.delete(card)
    db.session.commit()
    return f"Card with id {id} has been deleted"